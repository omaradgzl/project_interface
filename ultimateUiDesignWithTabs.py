#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.3
#  in conjunction with Tcl version 8.6
#    Mar 15, 2022 09:55:24 AM +03  platform: Windows NT
import sys
import os
import tkinter as tk
import tkinter.ttk as ttk

from tkinter.constants import *
from tkinter import filedialog
from tkinter import messagebox
import ultimateUiDesignWithTabs_support
import duplicateFinder , sibelMDF , photoTaker, gayeBankNeg
import threading 
import tabloo


class WholeWindow:
    
    global filename
    global filenameMDF
    global newPersonName
    global filenameBankNeg
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#abb2b9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#abb2b9' # Closest X11 color: 'gray92'
        
        facialIdentityText  = "Yüz Tanıma Projesi"
        sentimentAnalysisText  = "Duygu Analizi Projesi"
        dupFindText = "Kopya Bulma Projesi"
        chatBotText = "Twitter ChatBot Projesi"
        
        global filename
        global filenameMDF
        global newPersonName
        global filenameBankNeg
        newPersonName = "Yeni kişinin adı : "
        filename = "Video/Resim Klasörü"
        filenameMDF = "M Klasörü"
        filenameBankNeg = "Yazıları Klasörü"
        
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1198x704+2078+30")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(1,  1)
        top.title("Yapay Zeka Projeleri")
        top.configure(background="#17202a")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        

        def callDuplicateFinder(*args):
            global filename
            bucket_list,copyCount = duplicateFinder.callDuplicateFinder(filename)
            setDupText(bucket_list , copyCount)
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
            
        def callChatBot(*args):
            t5 = threading.Thread(target = openChatBot)
            t5.start()
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        def openChatBot():
            os.system('" python chatBotApp.py "')
            
        def callMDF(*args):
            global filenameMDF
            df , files = sibelMDF.funkMain(filenameMDF)
            setMDFText(files)
            t4 = threading.Thread(target = showMDFTabloo , args = (df , ))
            t4.start()
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        def showMDFTabloo(df):
            tabloo.show(df)  
        
        def callFacialIdentity(*args):
            t1 = threading.Thread(target = openFacial)
            t1.start()
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        def openFacial():
            os.system('"python faceRecogCam.py "')
            
        def callTrainer(*args):
            os.system('"python recognizer.py "')
            messagebox.showinfo("Train Model" , "Model Trained successfully")
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        
        def callSentimentAnalysis(*args):
            t2 = threading.Thread(target = openSentiment)
            t2.start()
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        def openSentiment():
            os.system('"python testEmotionDetector.py"')
            
        def callBankNeg(*args):
            global filenameBankNeg
            df , files = gayeBankNeg.funkMain(filenameBankNeg)
            setBankNegText(files)
            t5 = threading.Thread(target = showBankTabloo , args = (df , ))
            t5.start()
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        def showBankTabloo(df):
            tabloo.show(df)  

        self.top = top
        self.CanvasLogo = tk.Canvas(self.top)
        self.CanvasLogo.place(relx=0.01, rely=0.0, relheight=0.222 , relwidth=0.129)
        self.CanvasLogo.configure(background="#17202a")
        self.CanvasLogo.configure(highlightbackground="#d9d9d9")
        self.CanvasLogo.configure(highlightcolor="black")
        self.CanvasLogo.configure(highlightthickness="0")
        self.CanvasLogo.configure(insertbackground="black")
        self.CanvasLogo.configure(selectbackground="blue")
        self.CanvasLogo.configure(selectforeground="black")

        self.LabelLogo = tk.Label(self.CanvasLogo)
        self.LabelLogo.place(relx=0.0, rely=0.0, height=156, width=155)
        self.LabelLogo.configure(activebackground="#f9f9f9")
        self.LabelLogo.configure(activeforeground="black")
        self.LabelLogo.configure(background="#17202a")
        self.LabelLogo.configure(compound='left')
        self.LabelLogo.configure(disabledforeground="#a3a3a3")
        self.LabelLogo.configure(foreground="#17202a")
        self.LabelLogo.configure(highlightbackground="#17202a")
        self.LabelLogo.configure(highlightcolor="black")
        photo_location = "logo.png"
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.LabelLogo.configure(image=_img0)

        self.CanvasHeadline = tk.Canvas(self.top)
        self.CanvasHeadline.place(relx=0.15, rely=0.0, relheight=0.195 , relwidth=0.821)
        self.CanvasHeadline.configure(background="#17202a")
        self.CanvasHeadline.configure(borderwidth="2")
        self.CanvasHeadline.configure(highlightbackground="#d9d9d9")
        self.CanvasHeadline.configure(highlightcolor="black")
        self.CanvasHeadline.configure(highlightthickness="0")
        self.CanvasHeadline.configure(insertbackground="black")
        self.CanvasHeadline.configure(selectbackground="#ffffff")
        self.CanvasHeadline.configure(selectforeground="white")

        self.LabelHeadline = ttk.Label(self.CanvasHeadline)
        self.LabelHeadline.place(relx=0.0, rely=0.0, height=137, width=983)
        self.LabelHeadline.configure(background="#17202a")
        self.LabelHeadline.configure(foreground="#808080")
        self.LabelHeadline.configure(font="-family {Times New Roman} -size 36 -weight bold")
        self.LabelHeadline.configure(relief="flat")
        self.LabelHeadline.configure(anchor='center')
        self.LabelHeadline.configure(justify='left')
        self.LabelHeadline.configure(text='''Projeleri''')
        self.LabelHeadline.configure(compound='left')

        self.CanvasProjects = tk.Canvas(self.top)
        self.CanvasProjects.place(relx=0.01, rely=0.25, relheight=0.70 , relwidth=0.129)
        self.CanvasProjects.configure(background="#17202a")
        self.CanvasProjects.configure(borderwidth="2")
        self.CanvasProjects.configure(highlightbackground="#d9d9d9")
        self.CanvasProjects.configure(highlightcolor="black")
        self.CanvasProjects.configure(insertbackground="black")
        self.CanvasProjects.configure(relief="solid")
        self.CanvasProjects.configure(selectbackground="blue")
        self.CanvasProjects.configure(selectforeground="white")

        self.LabelTools = ttk.Label(self.CanvasProjects)
        self.LabelTools.place(relx=0.065, rely=0.022, height=30, width=140)
        self.LabelTools.configure(background="#17202a")
        self.LabelTools.configure(foreground="#808080")
        self.LabelTools.configure(font="-family {Times New Roman} -size 16 -weight bold")
        self.LabelTools.configure(relief="flat")
        self.LabelTools.configure(anchor='w')
        self.LabelTools.configure(justify='left')
        self.LabelTools.configure(text='''    Projeler''')
        self.LabelTools.configure(compound='left')

        self.CanvasNotebook = tk.Canvas(self.top)
        self.CanvasNotebook.place(relx=0.153, rely=0.251, relheight=0.7
                , relwidth=0.823)
        self.CanvasNotebook.configure(background="#17202a")
        self.CanvasNotebook.configure(highlightbackground="#17202a")
        self.CanvasNotebook.configure(highlightcolor="black")
        self.CanvasNotebook.configure(highlightthickness="0")
        self.CanvasNotebook.configure(insertbackground="black")
        self.CanvasNotebook.configure(relief="ridge")
        self.CanvasNotebook.configure(selectbackground="blue")
        self.CanvasNotebook.configure(selectforeground="black")
        

        global _images
        _images = (

         tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
                 8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
                 1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
                 AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
                 KkoNUtRHpYYAADs= '''),

         tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
                 INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
                 Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
                 AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
                 GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),

         tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
                 rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
                 +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
                 KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
                 IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
        )

        self.style.element_create("close", "image", "img_close",
               ("active", "pressed", "!disabled", "img_closepressed"),
               ("active", "alternate", "!disabled",
               "img_closeactive"), border=0, sticky='')

        self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
                                     {"sticky": "nswe"})])
        self.style.layout("ClosetabNotebook.Tab", [
            ("ClosetabNotebook.tab",
              { "sticky": "nswe",
                "children": [
                    ("ClosetabNotebook.padding", {
                        "side": "top",
                        "sticky": "nswe",
                        "children": [
                            ("ClosetabNotebook.focus", {
                                "side": "top",
                                "sticky": "nswe",
                                "children": [
                                    ("ClosetabNotebook.label", {"side":
                                      "left", "sticky": ''}),
                                    ("ClosetabNotebook.close", {"side":
                                        "left", "sticky": ''}),]})]})]})])
        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        PNOTEBOOK="ClosetabNotebook"
        self.NotebookMain = ttk.Notebook(self.CanvasNotebook )
        self.NotebookMain.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.NotebookMain.configure(style=PNOTEBOOK)

##FACIAL RECOGNITION TAB
        self.NotebookTabFacial = tk.Frame(self.NotebookMain)
        self.NotebookMain.add(self.NotebookTabFacial, padding=3)
        self.NotebookMain.tab(0, text='''Yüz Tanıma''', compound="left"
                ,underline='''-1''', )
        self.NotebookTabFacial.configure(background="#6b7884")
        self.NotebookTabFacial.configure(highlightbackground="#d9d9d9")
        self.NotebookTabFacial.configure(highlightcolor="black")
        
        self.FacialCallerButton = tk.Button(self.NotebookTabFacial)
        self.FacialCallerButton.place(relx=0.876, rely=0.907, height=37, width=98)
        self.FacialCallerButton.configure(activebackground="#ececec")
        self.FacialCallerButton.configure(activeforeground="#000000")
        self.FacialCallerButton.configure(background="#abb2b9")
        self.FacialCallerButton.configure(command=callFacialIdentity)
        self.FacialCallerButton.configure(compound='left')
        self.FacialCallerButton.configure(disabledforeground="#a3a3a3")
        self.FacialCallerButton.configure(font="-family {Times New Roman} -size 14")
        self.FacialCallerButton.configure(foreground="#000000")
        self.FacialCallerButton.configure(highlightbackground="#d9d9d9")
        self.FacialCallerButton.configure(highlightcolor="black")
        self.FacialCallerButton.configure(pady="0")
        self.FacialCallerButton.configure(text='''Başlat''')
        
        self.FacialTrainer = tk.Button(self.NotebookTabFacial)
        self.FacialTrainer.place(relx=0.611, rely=0.907, height=37, width=99)
        self.FacialTrainer.configure(activebackground="#ececec")
        self.FacialTrainer.configure(activeforeground="#000000")
        self.FacialTrainer.configure(background="#abb2b9")
        self.FacialTrainer.configure(command=callTrainer)
        self.FacialTrainer.configure(compound='left')
        self.FacialTrainer.configure(disabledforeground="#a3a3a3")
        self.FacialTrainer.configure(font="-family {Times New Roman} -size 11")
        self.FacialTrainer.configure(foreground="#000000")
        self.FacialTrainer.configure(highlightbackground="#d9d9d9")
        self.FacialTrainer.configure(highlightcolor="black")
        self.FacialTrainer.configure(pady="0")
        self.FacialTrainer.configure(text='''Modeli Eğit''')
        
        self.FacialText = tk.Text(self.NotebookTabFacial)
        self.FacialText.place(relx=0.021, rely=0.045, relheight=0.816 , relwidth=0.956)
        self.FacialText.configure(background="#2c3e50")
        self.FacialText.configure(font="-family {Times New Roman} -size 16")
        self.FacialText.configure(foreground="#ffffff")
        self.FacialText.configure(highlightbackground="#d9d9d9")
        self.FacialText.configure(highlightcolor="black")
        self.FacialText.configure(insertbackground="#ffffff")
        self.FacialText.configure(selectbackground="blue")
        self.FacialText.configure(selectforeground="white")
        self.FacialText.insert("1.0",facialIdentityText)
        self.FacialText.configure(state='disabled')
        self.FacialText.configure(wrap="word")
        
        self.FacialNameOfNewPerson = tk.Text(self.NotebookTabFacial)
        self.FacialNameOfNewPerson.place(relx=0.031, rely=0.901, relheight=0.08, relwidth=0.267)
        self.FacialNameOfNewPerson.configure(background="#2c3e50")
        self.FacialNameOfNewPerson.configure(font="-family {Times New Roman} -size 16")
        self.FacialNameOfNewPerson.configure(foreground="#ffffff")
        self.FacialNameOfNewPerson.configure(highlightbackground="#d9d9d9")
        self.FacialNameOfNewPerson.configure(highlightcolor="black")
        self.FacialNameOfNewPerson.configure(insertbackground="#ffffff")
        self.FacialNameOfNewPerson.configure(selectbackground="blue")
        self.FacialNameOfNewPerson.configure(selectforeground="white")
        self.FacialNameOfNewPerson.insert("1.0" , newPersonName)
        self.FacialNameOfNewPerson.configure(wrap="word")
        
        
        
##SENTIMENT ANALYSIS TAB
        self.NotebookTabSentiment = tk.Frame(self.NotebookMain)
        self.NotebookMain.add(self.NotebookTabSentiment, padding=3)
        self.NotebookMain.tab(1, text='''Duygu Analizi''', compound="left"
                ,underline='''-1''', )
        self.NotebookTabSentiment.configure(background="#6b7884")
        self.NotebookTabSentiment.configure(highlightbackground="#d9d9d9")
        self.NotebookTabSentiment.configure(highlightcolor="black")
        
        self.SentimentCallerButton = tk.Button(self.NotebookTabSentiment)
        self.SentimentCallerButton.place(relx=0.48, rely=0.901, height=35, width=97)
        self.SentimentCallerButton.configure(activebackground="#ececec")
        self.SentimentCallerButton.configure(activeforeground="#000000")
        self.SentimentCallerButton.configure(background="#abb2b9")
        self.SentimentCallerButton.configure(command=callSentimentAnalysis)
        self.SentimentCallerButton.configure(compound='left')
        self.SentimentCallerButton.configure(disabledforeground="#a3a3a3")
        self.SentimentCallerButton.configure(font="-family {Times New Roman} -size 16")
        self.SentimentCallerButton.configure(foreground="#000000")
        self.SentimentCallerButton.configure(highlightbackground="#d9d9d9")
        self.SentimentCallerButton.configure(highlightcolor="black")
        self.SentimentCallerButton.configure(pady="0")
        self.SentimentCallerButton.configure(text='''Başlat''')
        
        self.SentimentText = tk.Text(self.NotebookTabSentiment)
        self.SentimentText.place(relx=0.021, rely=0.045, relheight=0.816 , relwidth=0.959)
        self.SentimentText.configure(background="#2c3e50")
        self.SentimentText.configure(font="-family {Times New Roman} -size 16")
        self.SentimentText.configure(foreground="#ffffff")
        self.SentimentText.configure(highlightbackground="#d9d9d9")
        self.SentimentText.configure(highlightcolor="black")
        self.SentimentText.configure(insertbackground="#ffffff")
        self.SentimentText.configure(selectbackground="blue")
        self.SentimentText.configure(selectforeground="white")
        self.SentimentText.insert("1.0",sentimentAnalysisText )
        self.SentimentText.configure(state='disabled')
        self.SentimentText.configure(wrap="word")

        
        
##DUPLICATE FINDER TAB
        self.NotebookTabDupFind = tk.Frame(self.NotebookMain)
        self.NotebookMain.add(self.NotebookTabDupFind, padding=3)
        self.NotebookMain.tab(2, text='''Kopya Bulma''', compound="left"
                ,underline='''-1''', )
        self.NotebookTabDupFind.configure(background="#6b7884")
        self.NotebookTabDupFind.configure(highlightbackground="#d9d9d9")
        self.NotebookTabDupFind.configure(highlightcolor="black")
        
        self.DupFindText = tk.Text(self.NotebookTabDupFind)
        self.DupFindText.place(relx=0.031, rely=0.043, relheight=0.814 , relwidth=0.451)
        self.DupFindText.configure(background="#2c3e50")
        self.DupFindText.configure(font="-family {Times New Roman} -size 16")
        self.DupFindText.configure(foreground="#ffffff")
        self.DupFindText.configure(highlightbackground="#d9d9d9")
        self.DupFindText.configure(highlightcolor="black")
        self.DupFindText.configure(insertbackground="#ffffff")
        self.DupFindText.configure(selectbackground="blue")
        self.DupFindText.configure(selectforeground="white")
        self.DupFindText.configure(state='disabled')
        self.DupFindText.configure(wrap="word")
        
        self.DupFindCaller = tk.Button(self.NotebookTabDupFind)
        self.DupFindCaller.place(relx=0.811, rely=0.898, height=36, width=98)
        self.DupFindCaller.configure(activebackground="#ececec")
        self.DupFindCaller.configure(activeforeground="#000000")
        self.DupFindCaller.configure(background="#abb2b9")
        self.DupFindCaller.configure(command=callDuplicateFinder)
        self.DupFindCaller.configure(compound='left')
        self.DupFindCaller.configure(disabledforeground="#a3a3a3")
        self.DupFindCaller.configure(font="-family {Times New Roman} -size 16")
        self.DupFindCaller.configure(foreground="#000000")
        self.DupFindCaller.configure(highlightbackground="#d9d9d9")
        self.DupFindCaller.configure(highlightcolor="black")
        self.DupFindCaller.configure(pady="0")
        self.DupFindCaller.configure(text='''Başlat''')

        self.DupFindFilePathText = tk.Text(self.NotebookTabDupFind)
        self.DupFindFilePathText.place(relx=0.142, rely=0.898, relheight=0.08, relwidth=0.45)
        self.DupFindFilePathText.configure(background="#2c3e50")
        self.DupFindFilePathText.configure(font="-family {Times New Roman} -size 16")
        self.DupFindFilePathText.configure(foreground="#ffffff")
        self.DupFindFilePathText.configure(highlightbackground="#d9d9d9")
        self.DupFindFilePathText.configure(highlightcolor="black")
        self.DupFindFilePathText.configure(insertbackground="black")
        self.DupFindFilePathText.configure(selectbackground="blue")
        self.DupFindFilePathText.configure(selectforeground="white")
        self.DupFindFilePathText.insert("1.0" , filename,)
        self.DupFindFilePathText.configure(wrap="word")

        self.DupFindShowFile = tk.Text(self.NotebookTabDupFind)
        self.DupFindShowFile.place(relx=0.499, rely=0.432, relheight=0.08
                , relwidth=0.261)
        self.DupFindShowFile.configure(background="#2c3e50")
        self.DupFindShowFile.configure(font="-family {Times New Roman} -size 16")
        self.DupFindShowFile.configure(foreground="#ffffff")
        self.DupFindShowFile.configure(highlightbackground="#d9d9d9")
        self.DupFindShowFile.configure(highlightcolor="black")
        self.DupFindShowFile.configure(insertbackground="#ffffff")
        self.DupFindShowFile.configure(selectbackground="blue")
        self.DupFindShowFile.configure(selectforeground="white")
        self.DupFindShowFile.configure(wrap="word")
        
##MDF TAB
        self.NotebookTabMDF = tk.Frame(self.NotebookMain)
        self.NotebookMain.add(self.NotebookTabMDF, padding=3)
        self.NotebookMain.tab(3, text='''Döküman Okuma''', compound="left"
                ,underline='''-1''', )
        self.NotebookTabMDF.configure(background="#6b7884")
        self.NotebookTabMDF.configure(highlightbackground="#d9d9d9")
        self.NotebookTabMDF.configure(highlightcolor="black") 
        
        self.NoteBookTabChatBot = tk.Frame(self.NotebookMain)
        self.NotebookMain.add(self.NoteBookTabChatBot, padding=3)
        self.NotebookMain.tab(4, text='''Chat Bot''', compound="left"
                ,underline='''-1''', )
        self.NoteBookTabChatBot.configure(background="#6b7884")
        self.NoteBookTabChatBot.configure(highlightbackground="#d9d9d9")
        self.NoteBookTabChatBot.configure(highlightcolor="black")
        
        self.NoteBookTabBankNeg = tk.Frame(self.NotebookMain)
        self.NotebookMain.add(self.NoteBookTabBankNeg, padding=3)
        self.NotebookMain.tab(5, text='''Banka Müzakere''', compound="left"
               ,underline='''-1''', )
        self.NoteBookTabBankNeg.configure(background="#6b7884")
        self.NoteBookTabBankNeg.configure(highlightbackground="#d9d9d9")
        self.NoteBookTabBankNeg.configure(highlightcolor="black")
        
        self.MDFCaller = tk.Button(self.NotebookTabMDF)
        self.MDFCaller.place(relx=0.811, rely=0.898, height=36, width=98)
        self.MDFCaller.configure(activebackground="#ececec")
        self.MDFCaller.configure(activeforeground="#000000")
        self.MDFCaller.configure(background="#abb2b9")
        self.MDFCaller.configure(command=callMDF)
        self.MDFCaller.configure(compound='left')
        self.MDFCaller.configure(disabledforeground="#a3a3a3")
        self.MDFCaller.configure(font="-family {Times New Roman} -size 16")
        self.MDFCaller.configure(foreground="#000000")
        self.MDFCaller.configure(highlightbackground="#d9d9d9")
        self.MDFCaller.configure(highlightcolor="black")
        self.MDFCaller.configure(pady="0")
        self.MDFCaller.configure(text='''Başlat''')
        
        self.MDFText = tk.Text(self.NotebookTabMDF)
        self.MDFText.place(relx=0.031, rely=0.043, relheight=0.814 , relwidth=0.45)
        self.MDFText.configure(background="#2c3e50")
        self.MDFText.configure(font="-family {Times New Roman} -size 16")
        self.MDFText.configure(foreground="#ffffff")
        self.MDFText.configure(highlightbackground="#d9d9d9")
        self.MDFText.configure(highlightcolor="black")
        self.MDFText.configure(insertbackground="#ffffff")
        self.MDFText.configure(selectbackground="blue")
        self.MDFText.configure(selectforeground="white")
        self.MDFText.configure(state='disabled')
        self.MDFText.configure(wrap="word")
        
        self.MDFFilePathText = tk.Text(self.NotebookTabMDF)
        self.MDFFilePathText.place(relx=0.142, rely=0.898, relheight=0.08, relwidth=0.45)
        self.MDFFilePathText.configure(background="#2c3e50")
        self.MDFFilePathText.configure(font="-family {Times New Roman} -size 16")
        self.MDFFilePathText.configure(foreground="#ffffff")
        self.MDFFilePathText.configure(highlightbackground="#d9d9d9")
        self.MDFFilePathText.configure(highlightcolor="black")
        self.MDFFilePathText.configure(insertbackground="#ffffff")
        self.MDFFilePathText.configure(selectbackground="blue")
        self.MDFFilePathText.configure(selectforeground="white")
        self.MDFFilePathText.insert("1.0" , filenameMDF)
        self.MDFFilePathText.configure(wrap="word")
        
        self.MDFShowFile = tk.Text(self.NotebookTabMDF)
        self.MDFShowFile.place(relx=0.499, rely=0.432, relheight=0.08, relwidth=0.261)
        self.MDFShowFile.configure(background="#2c3e50")
        self.MDFShowFile.configure(font="-family {Times New Roman} -size 16")
        self.MDFShowFile.configure(foreground="#ffffff")
        self.MDFShowFile.configure(highlightbackground="#d9d9d9")
        self.MDFShowFile.configure(highlightcolor="black")
        self.MDFShowFile.configure(insertbackground="#ffffff")
        self.MDFShowFile.configure(selectbackground="blue")
        self.MDFShowFile.configure(selectforeground="white")
        self.MDFShowFile.configure(wrap="word")
        
##CHATBOT TAB
        self.ChatBotCallerButton = tk.Button(self.NoteBookTabChatBot)
        self.ChatBotCallerButton.place(relx=0.48, rely=0.901, height=35, width=97)
        self.ChatBotCallerButton.configure(activebackground="#ececec")
        self.ChatBotCallerButton.configure(activeforeground="#000000")
        self.ChatBotCallerButton.configure(background="#abb2b9")
        self.ChatBotCallerButton.configure(command=callChatBot)
        self.ChatBotCallerButton.configure(compound='left')
        self.ChatBotCallerButton.configure(disabledforeground="#a3a3a3")
        self.ChatBotCallerButton.configure(font="-family {Times New Roman} -size 16")
        self.ChatBotCallerButton.configure(foreground="#000000")
        self.ChatBotCallerButton.configure(highlightbackground="#d9d9d9")
        self.ChatBotCallerButton.configure(highlightcolor="black")
        self.ChatBotCallerButton.configure(pady="0")
        self.ChatBotCallerButton.configure(text='''Başlat''')
        
        self.ChatBotText = tk.Text(self.NoteBookTabChatBot)
        self.ChatBotText.place(relx=0.021, rely=0.045, relheight=0.814, relwidth=0.951)
        self.ChatBotText.configure(background="#2c3e50")
        self.ChatBotText.configure(font="-family {Times New Roman} -size 16")
        self.ChatBotText.configure(foreground="#ffffff")
        self.ChatBotText.configure(highlightbackground="#d9d9d9")
        self.ChatBotText.configure(highlightcolor="black")
        self.ChatBotText.configure(insertbackground="#ffffff")
        self.ChatBotText.configure(selectbackground="blue")
        self.ChatBotText.configure(selectforeground="white")
        self.ChatBotText.insert("1.0",chatBotText )
        self.ChatBotText.configure(state='disabled')
        self.ChatBotText.configure(wrap="word")

       
        
       
##BANK NEGOTIATONS TAB
        self.BankNegCallerButton = tk.Button(self.NoteBookTabBankNeg)
        self.BankNegCallerButton.place(relx=0.811, rely=0.898, height=36, width=98)
        self.BankNegCallerButton.configure(activebackground="#ececec")
        self.BankNegCallerButton.configure(activeforeground="#000000")
        self.BankNegCallerButton.configure(background="#abb2b9")
        self.BankNegCallerButton.configure(command=callBankNeg)
        self.BankNegCallerButton.configure(compound='left')
        self.BankNegCallerButton.configure(disabledforeground="#a3a3a3")
        self.BankNegCallerButton.configure(font="-family {Times New Roman} -size 16")
        self.BankNegCallerButton.configure(foreground="#000000")
        self.BankNegCallerButton.configure(highlightbackground="#d9d9d9")
        self.BankNegCallerButton.configure(highlightcolor="black")
        self.BankNegCallerButton.configure(pady="0")
        self.BankNegCallerButton.configure(text='''Başlat''')
        
        self.BankNegText = tk.Text(self.NoteBookTabBankNeg)
        self.BankNegText.place(relx=0.031, rely=0.043, relheight=0.814
                , relwidth=0.45)
        self.BankNegText.configure(background="#2c3e50")
        self.BankNegText.configure(font="-family {Times New Roman} -size 16")
        self.BankNegText.configure(foreground="#ffffff")
        self.BankNegText.configure(highlightbackground="#d9d9d9")
        self.BankNegText.configure(highlightcolor="black")
        self.BankNegText.configure(insertbackground="#ffffff")
        self.BankNegText.configure(selectbackground="blue")
        self.BankNegText.configure(selectforeground="white")
        self.BankNegText.configure(state='disabled')
        self.BankNegText.configure(wrap="word")
        
        self.BankNegFilePathText = tk.Text(self.NoteBookTabBankNeg)
        self.BankNegFilePathText.place(relx=0.142, rely=0.898, relheight=0.08
                , relwidth=0.45)
        self.BankNegFilePathText.configure(background="#2c3e50")
        self.BankNegFilePathText.configure(font="-family {Times New Roman} -size 16")
        self.BankNegFilePathText.configure(foreground="#ffffff")
        self.BankNegFilePathText.configure(highlightbackground="#d9d9d9")
        self.BankNegFilePathText.configure(highlightcolor="black")
        self.BankNegFilePathText.configure(insertbackground="#ffffff")
        self.BankNegFilePathText.configure(selectbackground="blue")
        self.BankNegFilePathText.configure(selectforeground="white")
        self.BankNegFilePathText.insert("1.0" , filenameBankNeg)
        self.BankNegFilePathText.configure(wrap="word")
        
        self.BankNegShowFile = tk.Text(self.NoteBookTabBankNeg)
        self.BankNegShowFile.place(relx=0.499, rely=0.432, relheight=0.08
                , relwidth=0.261)
        self.BankNegShowFile.configure(background="#2c3e50")
        self.BankNegShowFile.configure(font="-family {Times New Roman} -size 16")
        self.BankNegShowFile.configure(foreground="#ffffff")
        self.BankNegShowFile.configure(highlightbackground="#d9d9d9")
        self.BankNegShowFile.configure(highlightcolor="black")
        self.BankNegShowFile.configure(insertbackground="#ffffff")
        self.BankNegShowFile.configure(selectbackground="blue")
        self.BankNegShowFile.configure(selectforeground="white")
        self.BankNegShowFile.configure(wrap="word")


        
        self.NotebookMain.bind('<Button-1>',_button_press)
        self.NotebookMain.bind('<Button-3>',_right_click_menu)
        self.NotebookMain.bind('<ButtonRelease-1>',_button_release)
        self.NotebookMain.bind('<Motion>',_mouse_over)
        
        def pop_menu(event):
            menu.tk_popup(event.x_root, event.y_root)
            
        def copy_text():
            global a
            a =  self.NotebookMain.select()
            self.NotebookMain.clipboard_clear()
            self.NotebookMain.clipboard_append(self.NotebookMain.selection_get())
            
        def paste_text():
            global a
            if a == '.!canvas4.!notebook.!frame3':
                self.DupFindShowFile.delete("1.0" , END)
                self.DupFindShowFile.insert("1.0" ,self.NotebookMain.clipboard_get())
            if a == '.!canvas4.!notebook.!frame4':
                self.MDFShowFile.delete("1.0" , END)
                self.MDFShowFile.insert("1.0" ,self.NotebookMain.clipboard_get())
            if a == '.!canvas4.!notebook.!frame6':
                self.BankNegShowFile.delete("1.0" , END)
                self.BankNegShowFile.insert("1.0" ,self.NotebookMain.clipboard_get())
                
        
        
        def openFacialTab(*args):
            self.NotebookMain.select('.!canvas4.!notebook.!frame')
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
            

        def openSentimentTab(*args):
            self.NotebookMain.select('.!canvas4.!notebook.!frame2')
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
            
        def openDuplicateTab(*args):
            self.NotebookMain.select('.!canvas4.!notebook.!frame3')
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
            
        def openMDFTab(*args):
            self.NotebookMain.select('.!canvas4.!notebook.!frame4')
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
            
        def openChatBotTab(*args):
            self.NotebookMain.select('.!canvas4.!notebook.!frame5')
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        
        def openBankNegTab(*args):
            self.NotebookMain.select('.!canvas4.!notebook.!frame6')
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
            
            
        def callPhotoTaker(*args):
            global newPersonName
            newPersonName = self.FacialNameOfNewPerson.get("1.0" , END)
            # print(newPersonName)
            photoTaker.funkMain(newPersonName)
            messagebox.showinfo("Photo Taker" , "Photos of {} saved successfully".format(newPersonName))
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
            
        def browseFolder(*args):
            global filename
            filename = filedialog.askdirectory()
            self.DupFindFilePathText.configure(state="normal")
            self.DupFindFilePathText.delete("1.0", END)
            self.DupFindFilePathText.insert("1.0",filename)
            self.DupFindFilePathText.configure(state="disabled")
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        
        def browseMDFFolder(*args):
            global filenameMDF
            filenameMDF = filedialog.askdirectory()
            self.MDFFilePathText.configure(state="normal")
            self.MDFFilePathText.delete("1.0", END)
            self.MDFFilePathText.insert("1.0",filenameMDF)
            self.MDFFilePathText.configure(state="disabled")
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
            
        def browseBankNegFolder(*args):
            global filenameBankNeg
            filenameBankNeg = filedialog.askdirectory()
            print(filenameBankNeg)
            self.BankNegFilePathText.configure(state="normal")
            self.BankNegFilePathText.delete("1.0", END)
            self.BankNegFilePathText.insert("1.0",filenameBankNeg)
            self.BankNegFilePathText.configure(state="disabled")
            for arg in args:
                print ('another arg:', arg)
            sys.stdout.flush()
        
        
        
        def setDupText(bucket_list,copyCount):
            dupText = ''
            # print('{} Kopya Dosya Bulundu \n'.format(copyCount))
            for bucket in bucket_list:
                #print(bucket)
                for file_path in bucket:
                    head, tail = os.path.split(file_path)
                    dupText+= tail + "\n"
                dupText += "\n"
            dupText = str(copyCount) +  ' Kopya Dosya Bulundu \n' + dupText
            # print(dupText)
            self.DupFindText.configure(state='normal')
            self.DupFindText.delete("1.0", END)
            self.DupFindText.insert("1.0" , dupText)
            self.DupFindText.configure(state='disabled')
            
        def setMDFText(f):
            mdfText = ''
            # print('{} Dosya Bulundu \n'.format(len(f)))
            for i in f:
                head, tail = os.path.split(i)
                mdfText+= tail + "\n"
            mdfText = str(len(f)) +  ' Dosya Bulundu \n' + mdfText
            # print(mdfText)
            self.MDFText.configure(state='normal')
            self.MDFText.delete("1.0", END)
            self.MDFText.insert("1.0" , mdfText)
            self.MDFText.configure(state='disabled')
            
        def setBankNegText(f):
            bankNegText = ''
            # print('{} Dosya Bulundu \n'.format(len(f)))
            for i in f:
                head, tail = os.path.split(i)
                bankNegText+= tail + "\n"
            bankNegText = str(len(f)) +  ' Dosya Bulundu \n' + bankNegText
            # print(mdfText)
            self.BankNegText.configure(state='normal')
            self.BankNegText.delete("1.0", END)
            self.BankNegText.insert("1.0" , bankNegText)
            self.BankNegText.configure(state='disabled')
            
        def ShowDupImage():
            t3 = threading.Thread(target = openDupImage )
            if t3.is_alive():
                openDupImage()
            else:
                t3.start()
        def openDupImage():
            imgName = self.DupFindShowFile.get("1.0" , END)
            img_location = os.path.normpath(os.path.join(filename,imgName))
            # print(img_location)
            img_location = img_location.encode('unicode-escape').decode()
            img_location = img_location[:-2]
            
            # print(img_location)
            os.startfile(img_location)
            # img = cv2.imread(img_location)
            # img = cv2.resize(img,(600,600))
            # cv2.imshow(imgName , img)
            # cv2.waitKey(0)
            # cv2.destroyAllWindows()
            
            
        def ShowMDF():
            mdfName = self.MDFShowFile.get("1.0" , END)
            mdf_location = os.path.normpath(os.path.join(filenameMDF,mdfName))
            mdf_location = mdf_location.encode('utf-8').decode()
            mdf_location = mdf_location[:-1]
            # print(mdf_location)
            os.startfile(mdf_location)
            
        def showBankaNeg():
            negName = self.BankNegShowFile.get("1.0" , END)
            neg_location = os.path.normpath(os.path.join(filenameBankNeg,negName))
            neg_location = neg_location.encode('utf-8').decode()
            neg_location = neg_location[:-1]
            print(neg_location)
            os.startfile(neg_location)    
        
            
        self.ButtonToolFacial = tk.Button(self.CanvasProjects)
        self.ButtonToolFacial.place(relx=0.100, rely=0.100,  height=30
                , width=120)
        self.ButtonToolFacial.configure(activebackground="#ececec")
        self.ButtonToolFacial.configure(activeforeground="#000000")
        self.ButtonToolFacial.configure(background="#abb2b9")
        self.ButtonToolFacial.configure(command=openFacialTab)
        self.ButtonToolFacial.configure(compound='left')
        self.ButtonToolFacial.configure(disabledforeground="#a3a3a3")
        self.ButtonToolFacial.configure(font="-family {Times New Roman} -size 10")
        self.ButtonToolFacial.configure(foreground="#000000")
        self.ButtonToolFacial.configure(highlightbackground="#d9d9d9")
        self.ButtonToolFacial.configure(highlightcolor="black")
        self.ButtonToolFacial.configure(pady="0")
        self.ButtonToolFacial.configure(text='''Yüz Tanıma''')

        self.ButtonToolSentiment = tk.Button(self.CanvasProjects)
        self.ButtonToolSentiment.place(relx=0.1, rely=0.180,  height=30
                , width=120)
        self.ButtonToolSentiment.configure(activebackground="#ececec")
        self.ButtonToolSentiment.configure(activeforeground="#000000")
        self.ButtonToolSentiment.configure(background="#abb2b9")
        self.ButtonToolSentiment.configure(command=openSentimentTab)
        self.ButtonToolSentiment.configure(compound='left')
        self.ButtonToolSentiment.configure(disabledforeground="#a3a3a3")
        self.ButtonToolSentiment.configure(font="-family {Times New Roman} -size 10")
        self.ButtonToolSentiment.configure(foreground="#000000")
        self.ButtonToolSentiment.configure(highlightbackground="#d9d9d9")
        self.ButtonToolSentiment.configure(highlightcolor="black")
        self.ButtonToolSentiment.configure(pady="0")
        self.ButtonToolSentiment.configure(text='''Duygu Analizi''')

        self.ButtonToolDuplicate = tk.Button(self.CanvasProjects)
        self.ButtonToolDuplicate.place(relx=0.1, rely=0.260, height=30
                , width=120)
        self.ButtonToolDuplicate.configure(activebackground="#ececec")
        self.ButtonToolDuplicate.configure(activeforeground="#000000")
        self.ButtonToolDuplicate.configure(background="#abb2b9")
        self.ButtonToolDuplicate.configure(command=openDuplicateTab)
        self.ButtonToolDuplicate.configure(compound='left')
        self.ButtonToolDuplicate.configure(disabledforeground="#a3a3a3")
        self.ButtonToolDuplicate.configure(font="-family {Times New Roman} -size 10")
        self.ButtonToolDuplicate.configure(foreground="#000000")
        self.ButtonToolDuplicate.configure(highlightbackground="#d9d9d9")
        self.ButtonToolDuplicate.configure(highlightcolor="black")
        self.ButtonToolDuplicate.configure(pady="0")
        self.ButtonToolDuplicate.configure(text='''Kopya Bulma''')
        
        self.ButtonToolMDF = tk.Button(self.CanvasProjects)
        self.ButtonToolMDF.place(relx=0.1, rely=0.340, height=30, width=120)
        self.ButtonToolMDF.configure(activebackground="#ececec")
        self.ButtonToolMDF.configure(activeforeground="#000000")
        self.ButtonToolMDF.configure(background="#abb2b9")
        self.ButtonToolMDF.configure(command=openMDFTab)
        self.ButtonToolMDF.configure(compound='left')
        self.ButtonToolMDF.configure(disabledforeground="#a3a3a3")
        self.ButtonToolMDF.configure(font="-family {Times New Roman} -size 10")
        self.ButtonToolMDF.configure(foreground="#000000")
        self.ButtonToolMDF.configure(highlightbackground="#d9d9d9")
        self.ButtonToolMDF.configure(highlightcolor="black")
        self.ButtonToolMDF.configure(pady="0")
        self.ButtonToolMDF.configure(text='''Döküman Okuyucu''')  
        
        self.ButtonToolChatBot = tk.Button(self.CanvasProjects)
        self.ButtonToolChatBot.place(relx=0.1, rely=0.420, height=30
                , width=120)
        self.ButtonToolChatBot.configure(activebackground="#ececec")
        self.ButtonToolChatBot.configure(activeforeground="#000000")
        self.ButtonToolChatBot.configure(background="#abb2b9")
        self.ButtonToolChatBot.configure(command=openChatBotTab)
        self.ButtonToolChatBot.configure(compound='left')
        self.ButtonToolChatBot.configure(disabledforeground="#a3a3a3")
        self.ButtonToolChatBot.configure(font="-family {Times New Roman} -size 10")
        self.ButtonToolChatBot.configure(foreground="#000000")
        self.ButtonToolChatBot.configure(highlightbackground="#d9d9d9")
        self.ButtonToolChatBot.configure(highlightcolor="black")
        self.ButtonToolChatBot.configure(pady="0")
        self.ButtonToolChatBot.configure(text='''Chat Bot''')
        
        self.ButtonToolBankNegot = tk.Button(self.CanvasProjects)
        self.ButtonToolBankNegot.place(relx=0.1, rely=0.500, height=30
                , width=120)
        self.ButtonToolBankNegot.configure(activebackground="#ececec")
        self.ButtonToolBankNegot.configure(activeforeground="#000000")
        self.ButtonToolBankNegot.configure(background="#abb2b9")
        self.ButtonToolBankNegot.configure(command=openBankNegTab)
        self.ButtonToolBankNegot.configure(compound='left')
        self.ButtonToolBankNegot.configure(disabledforeground="#a3a3a3")
        self.ButtonToolBankNegot.configure(font="-family {Arial} -size 10")
        self.ButtonToolBankNegot.configure(foreground="#000000")
        self.ButtonToolBankNegot.configure(highlightbackground="#d9d9d9")
        self.ButtonToolBankNegot.configure(highlightcolor="black")
        self.ButtonToolBankNegot.configure(pady="0")
        self.ButtonToolBankNegot.configure(text='''**''')

        self.BankNegBrowseButton = tk.Button(self.NoteBookTabBankNeg)
        self.BankNegBrowseButton.place(relx=0.02, rely=0.898, height=37, width=98)
        self.BankNegBrowseButton.configure(activebackground="#ececec")
        self.BankNegBrowseButton.configure(activeforeground="#000000")
        self.BankNegBrowseButton.configure(background="#abb2b9")
        self.BankNegBrowseButton.configure(command=browseBankNegFolder)
        self.BankNegBrowseButton.configure(compound='left')
        self.BankNegBrowseButton.configure(disabledforeground="#a3a3a3")
        self.BankNegBrowseButton.configure(font="-family {Times New Roman} -size 16")
        self.BankNegBrowseButton.configure(foreground="#000000")
        self.BankNegBrowseButton.configure(highlightbackground="#d9d9d9")
        self.BankNegBrowseButton.configure(highlightcolor="black")
        self.BankNegBrowseButton.configure(pady="0")
        self.BankNegBrowseButton.configure(text='''Seç''')
        
        self.BankNegShowButton = tk.Button(self.NoteBookTabBankNeg)
        self.BankNegShowButton.place(relx=0.825, rely=0.432, height=36, width=98)
        self.BankNegShowButton.configure(activebackground="#ececec")
        self.BankNegShowButton.configure(activeforeground="#000000")
        self.BankNegShowButton.configure(background="#abb2b9")
        self.BankNegShowButton.configure(command=showBankaNeg)
        self.BankNegShowButton.configure(compound='left')
        self.BankNegShowButton.configure(disabledforeground="#a3a3a3")
        self.BankNegShowButton.configure(font="-family {Times New Roman} -size 16")
        self.BankNegShowButton.configure(foreground="#000000")
        self.BankNegShowButton.configure(highlightbackground="#d9d9d9")
        self.BankNegShowButton.configure(highlightcolor="black")
        self.BankNegShowButton.configure(pady="0")
        self.BankNegShowButton.configure(text='''Göster''')
        
        self.DupFindBrowseButton = tk.Button(self.NotebookTabDupFind)
        self.DupFindBrowseButton.place(relx=0.02, rely=0.899, height=37, width=98)
        self.DupFindBrowseButton.configure(activebackground="#ececec")
        self.DupFindBrowseButton.configure(activeforeground="#000000")
        self.DupFindBrowseButton.configure(background="#abb2b9")
        self.DupFindBrowseButton.configure(command=browseFolder)
        self.DupFindBrowseButton.configure(compound='left')
        self.DupFindBrowseButton.configure(disabledforeground="#a3a3a3")
        self.DupFindBrowseButton.configure(font="-family {Times New Roman} -size 16")
        self.DupFindBrowseButton.configure(foreground="#000000")
        self.DupFindBrowseButton.configure(highlightbackground="#d9d9d9")
        self.DupFindBrowseButton.configure(highlightcolor="black")
        self.DupFindBrowseButton.configure(pady="0")
        self.DupFindBrowseButton.configure(text='''Seç''')
        
        self.MDFBrowseButton = tk.Button(self.NotebookTabMDF)
        self.MDFBrowseButton.place(relx=0.02, rely=0.898, height=37, width=98)
        self.MDFBrowseButton.configure(activebackground="#ececec")
        self.MDFBrowseButton.configure(activeforeground="#000000")
        self.MDFBrowseButton.configure(background="#abb2b9")
        self.MDFBrowseButton.configure(command=browseMDFFolder)
        self.MDFBrowseButton.configure(compound='left')
        self.MDFBrowseButton.configure(disabledforeground="#a3a3a3")
        self.MDFBrowseButton.configure(font="-family {Times New Roman} -size 16")
        self.MDFBrowseButton.configure(foreground="#000000")
        self.MDFBrowseButton.configure(highlightbackground="#d9d9d9")
        self.MDFBrowseButton.configure(highlightcolor="black")
        self.MDFBrowseButton.configure(pady="0")
        self.MDFBrowseButton.configure(text='''Seç''')
        
        self.DupFindShowButton = tk.Button(self.NotebookTabDupFind)
        self.DupFindShowButton.place(relx=0.825, rely=0.432 ,height=36, width=98)

        self.DupFindShowButton.configure(activebackground="#ececec")
        self.DupFindShowButton.configure(activeforeground="#000000")
        self.DupFindShowButton.configure(background="#abb2b9")
        self.DupFindShowButton.configure(command=ShowDupImage)
        self.DupFindShowButton.configure(compound='left')
        self.DupFindShowButton.configure(disabledforeground="#a3a3a3")
        self.DupFindShowButton.configure(font="-family {Times New Roman} -size 16")
        self.DupFindShowButton.configure(foreground="#000000")
        self.DupFindShowButton.configure(highlightbackground="#d9d9d9")
        self.DupFindShowButton.configure(highlightcolor="black")
        self.DupFindShowButton.configure(pady="0")
        self.DupFindShowButton.configure(text='''Göster''')
        
        self.MDFShowButton = tk.Button(self.NotebookTabMDF)
        self.MDFShowButton.place(relx=0.825, rely=0.432, height=36, width=98)
        self.MDFShowButton.configure(activebackground="#ececec")
        self.MDFShowButton.configure(activeforeground="#000000")
        self.MDFShowButton.configure(background="#abb2b9")
        self.MDFShowButton.configure(command=ShowMDF)
        self.MDFShowButton.configure(compound='left')
        self.MDFShowButton.configure(disabledforeground="#a3a3a3")
        self.MDFShowButton.configure(font="-family {Times New Roman} -size 16")
        self.MDFShowButton.configure(foreground="#000000")
        self.MDFShowButton.configure(highlightbackground="#d9d9d9")
        self.MDFShowButton.configure(highlightcolor="black")
        self.MDFShowButton.configure(pady="0")
        self.MDFShowButton.configure(text='''Göster''')
        
        
        
        menu = tk.Menu(self.top , tearoff = False )
        menu.add_command(label = "Copy" ,command = copy_text)
        menu.add_separator()
        menu.add_command(label = "Paste" , command = paste_text)
        self.top.bind("<Button-3>" , pop_menu)

        

# The following code is add to handle mouse events with the close icons
# in PNotebooks widgets.
def _button_press(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        index = widget.index("@%d,%d" % (event.x, event.y))
        widget.state(['pressed'])
        widget._active = index

def _button_release(event):
    widget = event.widget
    if not widget.instate(['pressed']):
            return
    element = widget.identify(event.x, event.y)
    try:
        index = widget.index("@%d,%d" % (event.x, event.y))
    except TclError:
        pass
    if "close" in element and widget._active == index:
        widget.forget(index)
        widget.event_generate("<<NotebookTabClosed>>")

    widget.state(['!pressed'])
    widget._active = None

def _mouse_over(event):
    widget = event.widget
    element = widget.identify(event.x, event.y)
    if "close" in element:
        widget.state(['alternate'])
    else:
        widget.state(['!alternate'])


def _right_click_menu(event):
    menu.tk_popup(event.x_root ,event.y_root )



def start_up():
    ultimateUiDesignWithTabs_support.main()

if __name__ == '__main__':
    ultimateUiDesignWithTabs_support.main()




